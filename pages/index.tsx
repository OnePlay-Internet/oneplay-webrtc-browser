import React, { useEffect, useRef, useState } from "react";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { AskSelectBitrate, AskSelectDisplay, AskSelectFramerate, AskSelectSoundcard, TurnOnAlert, TurnOnStatus} from "../components/popup";
import { WebRTCClient } from "../webrtc/app";
import { useRouter } from "next/router";
import SpeedDial from "@mui/material/SpeedDial";
import SpeedDialAction from "@mui/material/SpeedDialAction";
import {
  List,
  VolumeOff,
  VolumeUp,
  Fullscreen,
  FullscreenExit,
} from "@mui/icons-material";
import Draggable from "react-draggable";
import { DeviceSelection, DeviceSelectionResult } from "../webrtc/models/devices.model";
import { ConnectionEvent, Log, LogConnectionEvent, LogLevel } from "../webrtc/utils/log";
import { GetServerSideProps, NextPage } from "next";


type Props = { host: string | null };

export const getServerSideProps: GetServerSideProps<Props> =
  async context => ({ props: { host: context.req.headers.host || null } });




const Home = ({ host }) => {
  const remoteVideo = useRef<HTMLVideoElement>(null);
  const remoteAudio = useRef<HTMLAudioElement>(null);
  let router = useRouter();

  const [actions, setActions] = useState<
    {
      icon: JSX.Element;
      name: string;
      action: () => void;
    }[]
  >([]);

  const actions1 = [
    {
      icon: <VolumeUp />,
      name: "Mute",
      action: () => {
        remoteAudio.current.muted = true;
        toggleAction(0, 1);
      },
    },
    {
      icon: <Fullscreen />,
      name: "Enter fullscreen",
      action: () => {
        document.documentElement.requestFullscreen();
        toggleAction(1, 1);
      },
    },
  ];

  const actions2 = [
    {
      icon: <VolumeOff />,
      name: "Unmute",
      action: () => {
        remoteAudio.current.muted = false;
        toggleAction(0, 2);
      },
    },
    {
      icon: <FullscreenExit />,
      name: "exit fullscreen",
      action: () => {
        document.exitFullscreen();
        toggleAction(1, 2);
      },
    },
  ];

  const toggleAction = (index: number, action: 1 | 2) => {
    setActions((s) => {
      const newActions = [...s];
      newActions[index] =
        action === 1 ? { ...actions2[index] } : { ...actions1[index] };
      return newActions;
    });
  };

  useEffect(() => {
    setActions([...actions1]);
    if (remoteVideo.current) {
      let signalingURL = (host.split(":")[0] != "localhost" )? `wss://${host}/handshake` : "wss://remote.thinkmay.net/handshake";
      let token = router.asPath?.split("?")[1]?.split("=")[1] ?? "";
      if (token == "") {
        window.location.replace("https://service.thinkmay.net/dashboard");
      }


      new WebRTCClient(signalingURL,remoteVideo, remoteAudio, token, (async (offer: DeviceSelection) => {
          LogConnectionEvent(ConnectionEvent.WaitingAvailableDeviceSelection)
          var soundcardID = await AskSelectSoundcard(offer.soundcards)
          Log(LogLevel.Infor,`selected audio deviceid ${soundcardID}`)
          var DeviceHandle = await AskSelectDisplay(offer.monitors)
          Log(LogLevel.Infor,`selected monitor handle ${DeviceHandle}`)
          var bitrate = await AskSelectBitrate()
          Log(LogLevel.Infor,`selected bitrate ${bitrate}`)
          var framerate = await AskSelectFramerate()
          Log(LogLevel.Infor,`selected framerate ${framerate}`)
          LogConnectionEvent(ConnectionEvent.ExchangingSignalingMessage)
          return new DeviceSelectionResult(bitrate,framerate,soundcardID,DeviceHandle);
      })).Notifier(message => {
        TurnOnStatus(message);
      }).Alert(message => {
        TurnOnAlert(message);
      });


    }
  }, []);

  return (
    <div>
      <Head>
        <title>WebRTC remote viewer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.app}>
        <Draggable>
          <SpeedDial
            ariaLabel="SpeedDial basic example"
            sx={{ position: "absolute", bottom: 16, right: 16 }}
            icon={<List />}
          >
            {actions.map((action) => (
              <SpeedDialAction
                key={action.name}
                icon={action.icon}
                tooltipTitle={action.name}
                onClick={action.action}
              />
            ))}
          </SpeedDial>
        </Draggable>
      </div>
      <video ref={remoteVideo} className={styles.remoteVideo} autoPlay muted playsInline loop ></video>
      <audio ref={remoteAudio} autoPlay controls style={{ zIndex: -1 }}></audio>
    </div>
  );
};

export default Home;
